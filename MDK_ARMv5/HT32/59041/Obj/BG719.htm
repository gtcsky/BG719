<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\59041\Obj\BG719.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\59041\Obj\BG719.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat May 30 10:15:53 2020
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MenuFunction &rArr; incKeyPressedFunc &rArr; temperatureUnitSettingFunc &rArr; updateThresholdDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">BFTM1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BFTM1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from user_adc.o(i.ADC_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[12]">BFTM0_IRQHandler</a> from user_basetime.o(i.BFTM0_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[13]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from user_exti.o(i.EXTI0_1_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from user_exti.o(i.EXTI2_3_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from user_exti.o(i.EXTI4_15_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[f]">GPTM0_IRQHandler</a> from user_advtime.o(i.GPTM0_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[e]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[10]">PWM0_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[11]">PWM1_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from user_lptimer.o(i.RTC_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from user_spi.o(i.SPI0_IRQHandler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from system_ht32f5xxxx_04.o(i.SystemInit) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[18]">USART0_IRQHandler</a> from startup_ht32f5xxxx_02.o(RESET) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_02.o(RESET)
 <LI><a href="#[1d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))

<P><STRONG><a name="[13]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_02.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fa]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fe]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ff]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumLen
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSignalRecord
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreNewRecord
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData2Flash
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSettingFromEeprom
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRound
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAbs
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperatureOfAmbient
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChXValue
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRound
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHotThreshold
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResIndex
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcResultProcess
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHotThreshold
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChXValue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResIndex
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcResultProcess
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperatureOfAmbient
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResIndex
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcResultProcess
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcResultProcess
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRound
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAbs
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[104]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[105]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[106]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[24]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[108]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>ADC_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GroupProcess
</UL>

<P><STRONG><a name="[43]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[3b]"></a>ADC_Configuration</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, user_adc.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_Configuration &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCnPrescaler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SamplingTimeConfig
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Group1Config
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GroupProcess
</UL>

<P><STRONG><a name="[40]"></a>ADC_Group1Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, user_adc.o(i.ADC_Group1Config))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[44]"></a>ADC_GroupProcess</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, user_adc.o(i.ADC_GroupProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GroupProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IRQHandler &rArr; ADC_GroupProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GroupProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC_IntConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_adc.o(i.ADC_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[3f]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ht32f5xxxx_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[41]"></a>ADC_SamplingTimeConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SamplingTimeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[47]"></a>ADVTIM_PWMMODE_Config</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, user_advtime.o(i.ADVTIM_PWMMODE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADVTIM_PWMMODE_Config &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OutputInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ht32f5xxxx_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>

<P><STRONG><a name="[3d]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoInit
</UL>

<P><STRONG><a name="[4e]"></a>BASIC_TIM_Mode_Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, user_basetime.o(i.BASIC_TIM_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BASIC_TIM_Mode_Config &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user_basetime.o(i.BFTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BFTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>BFTM_EnaCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[51]"></a>BFTM_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[4f]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[50]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[6e]"></a>CKCU_GetClockReadyStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClockReadyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[54]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[55]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[3c]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>

<P><STRONG><a name="[3e]"></a>CKCU_SetADCnPrescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_SetADCnPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[68]"></a>CaptureProcess</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, user_advtime.o(i.CaptureProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CaptureProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_exti.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeFlag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_exti.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_3_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeFlag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, user_exti.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeFlag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>EXTI_GetEdgeFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_GetEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>EXTI_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>

<P><STRONG><a name="[61]"></a>EXTI_IntConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>

<P><STRONG><a name="[59]"></a>EXTI_Key_Config</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, user_exti.o(i.EXTI_Key_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EXTI_Key_Config &rArr; GPIO_EXTILineConfig &rArr; GPIO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>FlashInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_datastore.o(i.FlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = FlashInit &rArr; TemperatureRecordInit &rArr; StoreData2Flash &rArr; writeEepromData &rArr; user_EEPROM_24C256_PageWrite &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureRecordInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSettingFromEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[66]"></a>GPIO_DriveConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[5a]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, user_exti.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_EXTILineConfig &rArr; GPIO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, user_menu.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnIoInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genStopByteManual
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>

<P><STRONG><a name="[65]"></a>GPIO_InputConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[63]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_ReadInBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
</UL>

<P><STRONG><a name="[d3]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnIoInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGpioInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genStopByteManual
</UL>

<P><STRONG><a name="[f]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, user_advtime.o(i.GPTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPTM0_IRQHandler &rArr; TM_ChPolarityConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetCaptureCompare
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ChPolarityConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>I2C_AckCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_AckCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
</UL>

<P><STRONG><a name="[a8]"></a>I2C_CheckStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_CheckStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_PageWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkStts
</UL>

<P><STRONG><a name="[f6]"></a>I2C_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_AckPolling
</UL>

<P><STRONG><a name="[6b]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[a6]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_PageWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_PageWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkStts
</UL>

<P><STRONG><a name="[f5]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_AckPolling
</UL>

<P><STRONG><a name="[6a]"></a>I2C_Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ht32f5xxxx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_Init
</UL>

<P><STRONG><a name="[f3]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
</UL>

<P><STRONG><a name="[f0]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_PageWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_PageWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
</UL>

<P><STRONG><a name="[f1]"></a>I2C_TargetAddressConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_i2c.o(i.I2C_TargetAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TargetAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_AckPolling
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
</UL>

<P><STRONG><a name="[6c]"></a>LPTIMER_Config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, user_lptimer.o(i.LPTIMER_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIMER_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCompare
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClockSourceConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CMPCLRCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_DeInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClockReadyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>LoadSettingFromEeprom</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, user_datastore.o(i.LoadSettingFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = LoadSettingFromEeprom &rArr; loadSignalRecord &rArr; readEepromData &rArr; user_EEPROM_24C256_BufferRead &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEepromData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSignalRecord
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[78]"></a>MenuFunction</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, user_menu.o(i.MenuFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MenuFunction &rArr; incKeyPressedFunc &rArr; temperatureUnitSettingFunc &rArr; updateThresholdDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genKeyTone
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyPressedFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyLongPressedFunc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGreenLEDToggle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntrySleepTime
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerKeyPressedFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryCalibrateMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>NVIC_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[84]"></a>OLED_Set_Pos</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, user_lcd.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledDisplayBigChinesePub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
</UL>

<P><STRONG><a name="[86]"></a>OLED_ShowCHinese</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, user_lcd.o(i.OLED_ShowCHinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_ShowCHinese &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoiceDisplay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledChineseString
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBigChar
</UL>

<P><STRONG><a name="[88]"></a>OLED_ShowChar</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, user_lcd.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateUnitDisplay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateArrowDisplay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[89]"></a>OLED_ShowNum</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, user_lcd.o(i.OLED_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumLen
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[8c]"></a>OLED_ShowString</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, user_lcd.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoiceDisplay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateUnitDisplay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTargetCharacter
</UL>

<P><STRONG><a name="[6d]"></a>PWRCU_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ht32f5xxxx_pwrcu.o(i.PWRCU_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>RTC_CMPCLRCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_CMPCLRCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[6f]"></a>RTC_ClockSourceConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[74]"></a>RTC_Cmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[8d]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, user_lptimer.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_IRQHandler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCompare
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>RTC_IntConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[72]"></a>RTC_SetCompare</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>RTC_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_spi.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userSpiInit
</UL>

<P><STRONG><a name="[90]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f5xxxx_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>

<P><STRONG><a name="[ec]"></a>SPI_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ht32f5xxxx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userSpiInit
</UL>

<P><STRONG><a name="[ed]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SELOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userSpiInit
</UL>

<P><STRONG><a name="[8e]"></a>SPI_SendByte</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, user_spi.o(i.SPI_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[8f]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[98]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[97]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[96]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[91]"></a>StoreData2Flash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, user_datastore.o(i.StoreData2Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = StoreData2Flash &rArr; writeEepromData &rArr; user_EEPROM_24C256_PageWrite &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureRecordInit
</UL>

<P><STRONG><a name="[93]"></a>StoreNewRecord</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, user_datastore.o(i.StoreNewRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = StoreNewRecord &rArr; writeEepromData &rArr; user_EEPROM_24C256_PageWrite &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
</UL>

<P><STRONG><a name="[94]"></a>SysTick_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, system_ht32f5xxxx_04.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_02.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TM_ChPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ht32f5xxxx_tm.o(i.TM_ChPolarityConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_ChPolarityConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>TM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
</UL>

<P><STRONG><a name="[4d]"></a>TM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
</UL>

<P><STRONG><a name="[67]"></a>TM_GetCaptureCompare</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_tm.o(i.TM_GetCaptureCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_GetCaptureCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>TM_OutputInit</STRONG> (Thumb, 196 bytes, Stack size 28 bytes, ht32f5xxxx_tm.o(i.TM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
</UL>

<P><STRONG><a name="[48]"></a>TM_TimeBaseInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
</UL>

<P><STRONG><a name="[5d]"></a>TemperatureRecordInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, user_datastore.o(i.TemperatureRecordInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = TemperatureRecordInit &rArr; StoreData2Flash &rArr; writeEepromData &rArr; user_EEPROM_24C256_PageWrite &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData2Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[9a]"></a>WriteData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, user_spi.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdCommand
</UL>

<P><STRONG><a name="[39]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[109]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9b]"></a>adcResultProcess</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, user_menu.o(i.adcResultProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adcResultProcess &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[9d]"></a>calcTemperature</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, user_menu.o(i.calcTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRound
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
</UL>

<P><STRONG><a name="[a1]"></a>checkSigmaAdConvertOver</STRONG> (Thumb, 646 bytes, Stack size 48 bytes, user_i2c.o(i.checkSigmaAdConvertOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = checkSigmaAdConvertOver &rArr; stopConvert &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSigmaCtrlRegister
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopConvert
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSigmaCtrlRegister
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSigmaAdConvert
</UL>

<P><STRONG><a name="[a5]"></a>checkStts</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, user_i2c.o(i.checkStts))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genStopByteManual
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_PageWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
</UL>

<P><STRONG><a name="[a9]"></a>clear</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, user_lcd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clear &rArr; writeLcdData &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyPressedFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyLongPressedFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryCalibrateMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
</UL>

<P><STRONG><a name="[aa]"></a>clrMainTemperatureDisplay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, user_lcd.o(i.clrMainTemperatureDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clrMainTemperatureDisplay &rArr; displayBigChar &rArr; OLED_ShowCHinese &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBigChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
</UL>

<P><STRONG><a name="[ac]"></a>convertAmbientTemperature</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user_menu.o(i.convertAmbientTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = convertAmbientTemperature &rArr; updateAdChlAndStart &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAdChlAndStart
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerKeyPressedFunc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[ae]"></a>convertMcuTemperature</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_menu.o(i.convertMcuTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = convertMcuTemperature &rArr; updateAdChlAndStart &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAdChlAndStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[af]"></a>convertObjectTemperature</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, user_menu.o(i.convertObjectTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = convertObjectTemperature &rArr; updateAdChlAndStart &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAdChlAndStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[99]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureRecordInit
</UL>

<P><STRONG><a name="[7e]"></a>decKeyPressedFunc</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, user_menu.o(i.decKeyPressedFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = decKeyPressedFunc &rArr; temperatureUnitSettingFunc &rArr; updateThresholdDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoiceDisplay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEepromData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSignalRecord
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData2Flash
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[e5]"></a>delay100us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_lcd.o(i.delay100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay100us
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
</UL>

<P><STRONG><a name="[ab]"></a>displayBigChar</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, user_lcd.o(i.displayBigChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = displayBigChar &rArr; OLED_ShowCHinese &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrMainTemperatureDisplay
</UL>

<P><STRONG><a name="[b5]"></a>displayBigChinese</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, user_lcd.o(i.displayBigChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = displayBigChinese &rArr; oledDisplayBigChinesePub &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledDisplayBigChinesePub
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
</UL>

<P><STRONG><a name="[b7]"></a>displayFloat</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, user_lcd.o(i.displayFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[b8]"></a>displaySystemMenu</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, user_lcd.o(i.displaySystemMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = displaySystemMenu &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoiceDisplay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateUnitDisplay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateArrowDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTargetCharacter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledChineseString
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyPressedFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyLongPressedFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryCalibrateMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
</UL>

<P><STRONG><a name="[7c]"></a>entryCalibrateMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_menu.o(i.entryCalibrateMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = entryCalibrateMode &rArr; displaySystemMenu &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaAdTest
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyLongPressedFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[56]"></a>entryNormalModeChk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_menu.o(i.entryNormalModeChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntrySleepTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>fucnPer100ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_menu.o(i.fucnPer100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fucnPer100ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;holdingKeyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[c5]"></a>fucnPer1s</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_menu.o(i.fucnPer1s))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[c4]"></a>fucnPer500ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_menu.o(i.fucnPer500ms))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[c3]"></a>fucnPer50ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_menu.o(i.fucnPer50ms))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[c1]"></a>fucnPer5ms</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, user_menu.o(i.fucnPer5ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fucnPer5ms &rArr; adcResultProcess &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceFunc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer50ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer500ms
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer1s
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer100ms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcResultProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>funcDecKeyReleased</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, user_key.o(i.funcDecKeyReleased))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDecKeyPressedFlag
</UL>

<P><STRONG><a name="[c9]"></a>funcIncKeyReleased</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, user_key.o(i.funcIncKeyReleased))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIncKeyPressedFlag
</UL>

<P><STRONG><a name="[c6]"></a>funcKeyTask</STRONG> (Thumb, 668 bytes, Stack size 8 bytes, user_key.o(i.funcKeyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = funcKeyTask &rArr; setSettingKeyPressedFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSettingKeyPressedFlag
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerKeyPressedFlag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIncKeyPressedFlag
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDecKeyPressedFlag
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcSettingKeyReleased
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcPowerKeyReleased
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcIncKeyReleased
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcDecKeyReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>funcPowerKeyReleased</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, user_key.o(i.funcPowerKeyReleased))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
</UL>

<P><STRONG><a name="[cb]"></a>funcSettingKeyReleased</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, user_key.o(i.funcSettingKeyReleased))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSettingKeyPressedFlag
</UL>

<P><STRONG><a name="[d0]"></a>genConfrimTone</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, user_tone.o(i.genConfrimTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = genConfrimTone
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genTonePub
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
</UL>

<P><STRONG><a name="[d2]"></a>genErrorTone</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, user_tone.o(i.genErrorTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = genErrorTone
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genTonePub
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
</UL>

<P><STRONG><a name="[7a]"></a>genKeyTone</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, user_tone.o(i.genKeyTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = genKeyTone
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genTonePub
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[a7]"></a>genStopByteManual</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, user_i2c.o(i.genStopByteManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkStts
</UL>

<P><STRONG><a name="[d1]"></a>genTonePub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_tone.o(i.genTonePub))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genKeyTone
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genErrorTone
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genConfrimTone
</UL>

<P><STRONG><a name="[d5]"></a>getHotThreshold</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, user_menu.o(i.getHotThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getHotThreshold &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
</UL>

<P><STRONG><a name="[8a]"></a>getNumLen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, user_lcd.o(i.getNumLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getNumLen &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[d6]"></a>getObjectTemperature</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, user_menu.o(i.getObjectTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = getObjectTemperature &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[d8]"></a>getResIndex</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, user_menu.o(i.getResIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = getResIndex &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperatureOfAmbient
</UL>

<P><STRONG><a name="[da]"></a>getTemperatureOfAmbient</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, user_menu.o(i.getTemperatureOfAmbient))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = getTemperatureOfAmbient &rArr; getResIndex &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[c0]"></a>holdingKeyFunc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, user_key.o(i.holdingKeyFunc))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer100ms
</UL>

<P><STRONG><a name="[7d]"></a>incKeyPressedFunc</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, user_menu.o(i.incKeyPressedFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = incKeyPressedFunc &rArr; temperatureUnitSettingFunc &rArr; updateThresholdDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVoiceDisplay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChXValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSignalRecord
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[dc]"></a>irSensorDataProcess</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, user_menu.o(i.irSensorDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = irSensorDataProcess &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genErrorTone
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genConfrimTone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreNewRecord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHotThreshold
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
</UL>

<P><STRONG><a name="[de]"></a>lcdGpioInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user_lcd.o(i.lcdGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcdGpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
</UL>

<P><STRONG><a name="[77]"></a>loadSignalRecord</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, user_datastore.o(i.loadSignalRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = loadSignalRecord &rArr; readEepromData &rArr; user_EEPROM_24C256_BufferRead &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEepromData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyPressedFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSettingFromEeprom
</UL>

<P><STRONG><a name="[1d]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; MenuFunction &rArr; incKeyPressedFunc &rArr; temperatureUnitSettingFunc &rArr; updateThresholdDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaResultExecute
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaAdTest
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnIoInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b9]"></a>mainTemperatureDisplay</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, user_lcd.o(i.mainTemperatureDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAbs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledChineseString
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBigChinese
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBigChar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrMainTemperatureDisplay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
</UL>

<P><STRONG><a name="[bc]"></a>oledChineseString</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, user_lcd.o(i.oledChineseString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = oledChineseString &rArr; OLED_ShowCHinese &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTargetCharacter
</UL>

<P><STRONG><a name="[b6]"></a>oledDisplayBigChinesePub</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, user_lcd.o(i.oledDisplayBigChinesePub))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = oledDisplayBigChinesePub &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBigChinese
</UL>

<P><STRONG><a name="[8b]"></a>oled_pow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_lcd.o(i.oled_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[7b]"></a>powerKeyPressedFunc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, user_menu.o(i.powerKeyPressedFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = powerKeyPressedFunc &rArr; powerOnLcdInit &rArr; displaySystemMenu &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRedLEDToggle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntrySleepTime
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertAmbientTemperature
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[df]"></a>powerOnIoInit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, user_menu.o(i.powerOnIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = powerOnIoInit &rArr; GPIO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>powerOnLcdInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, user_lcd.o(i.powerOnLcdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = powerOnLcdInit &rArr; displaySystemMenu &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userSpiInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGpioInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerKeyPressedFunc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>readEepromData</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, user_i2c.o(i.readEepromData))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = readEepromData &rArr; user_EEPROM_24C256_BufferRead &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSignalRecord
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSettingFromEeprom
</UL>

<P><STRONG><a name="[a2]"></a>readSigmaCtrlRegister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, user_i2c.o(i.readSigmaCtrlRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = readSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferRead &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAdChlAndStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaAdTest
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopConvert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSigmaAdConvert
</UL>

<P><STRONG><a name="[81]"></a>resetEntrySleepTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, user_menu.o(i.resetEntrySleepTime))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerKeyPressedFunc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[ce]"></a>setDecKeyPressedFlag</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, user_key.o(i.setDecKeyPressedFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setDecKeyPressedFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcDecKeyReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
</UL>

<P><STRONG><a name="[79]"></a>setGreenLEDToggle</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, user_menu.o(i.setGreenLEDToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setGreenLEDToggle &rArr; set_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[cd]"></a>setIncKeyPressedFlag</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, user_key.o(i.setIncKeyPressedFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setIncKeyPressedFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcIncKeyReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
</UL>

<P><STRONG><a name="[cc]"></a>setPowerKeyPressedFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, user_key.o(i.setPowerKeyPressedFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
</UL>

<P><STRONG><a name="[e3]"></a>setRedLEDToggle</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, user_menu.o(i.setRedLEDToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setRedLEDToggle &rArr; set_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerKeyPressedFunc
</UL>

<P><STRONG><a name="[cf]"></a>setSettingKeyPressedFlag</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, user_key.o(i.setSettingKeyPressedFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setSettingKeyPressedFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcSettingKeyReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
</UL>

<P><STRONG><a name="[e8]"></a>set_LED_Toggle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_menu.o(i.set_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRedLEDToggle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGreenLEDToggle
</UL>

<P><STRONG><a name="[80]"></a>settingKeyLongPressedFunc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, user_menu.o(i.settingKeyLongPressedFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = settingKeyLongPressedFunc &rArr; entryCalibrateMode &rArr; displaySystemMenu &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryCalibrateMode
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[7f]"></a>settingKeyPressedFunc</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, user_menu.o(i.settingKeyPressedFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = settingKeyPressedFunc &rArr; displaySystemMenu &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateArrowDisplay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSignalRecord
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[be]"></a>sigmaAdTest</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, user_i2c.o(i.sigmaAdTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sigmaAdTest &rArr; startSigmaAdConvert &rArr; checkSigmaAdConvertOver &rArr; stopConvert &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSigmaCtrlRegister
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSigmaAdConvert
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSigmaCtrlRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryCalibrateMode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>sigmaResultExecute</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, user_menu.o(i.sigmaResultExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sigmaResultExecute &rArr; irSensorDataProcess &rArr; mainTemperatureDisplay &rArr; calcTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperatureOfAmbient
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectTemperature
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertObjectTemperature
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertMcuTemperature
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertAmbientTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>spiIoInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, user_spi.o(i.spiIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spiIoInit &rArr; GPIO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userSpiInit
</UL>

<P><STRONG><a name="[e9]"></a>startSigmaAdConvert</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, user_i2c.o(i.startSigmaAdConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = startSigmaAdConvert &rArr; checkSigmaAdConvertOver &rArr; stopConvert &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSigmaCtrlRegister
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSigmaCtrlRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaAdTest
</UL>

<P><STRONG><a name="[a4]"></a>stopConvert</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, user_i2c.o(i.stopConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = stopConvert &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSigmaCtrlRegister
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSigmaCtrlRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
</UL>

<P><STRONG><a name="[b1]"></a>temperatureUnitSettingFunc</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, user_menu.o(i.temperatureUnitSettingFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = temperatureUnitSettingFunc &rArr; updateThresholdDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateUnitDisplay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateThresholdDisplay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
</UL>

<P><STRONG><a name="[ad]"></a>updateAdChlAndStart</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, user_i2c.o(i.updateAdChlAndStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = updateAdChlAndStart &rArr; writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSigmaCtrlRegister
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSigmaCtrlRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertObjectTemperature
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertMcuTemperature
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertAmbientTemperature
</UL>

<P><STRONG><a name="[bb]"></a>updateArrowDisplay</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, user_lcd.o(i.updateArrowDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = updateArrowDisplay &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyPressedFunc
</UL>

<P><STRONG><a name="[b0]"></a>updateMemDataDisplay</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, user_lcd.o(i.updateMemDataDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = updateMemDataDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAbs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledChineseString
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irSensorDataProcess
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
</UL>

<P><STRONG><a name="[db]"></a>updatePWMChXValue</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, user_advtime.o(i.updatePWMChXValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = updatePWMChXValue &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[eb]"></a>updatePWMChlDuty</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, user_advtime.o(i.updatePWMChlDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = updatePWMChlDuty &rArr; updatePWMChXValue &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChXValue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceFunc
</UL>

<P><STRONG><a name="[ba]"></a>updateTargetCharacter</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, user_lcd.o(i.updateTargetCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = updateTargetCharacter &rArr; oledChineseString &rArr; OLED_ShowCHinese &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledChineseString
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
</UL>

<P><STRONG><a name="[b3]"></a>updateThresholdDisplay</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, user_lcd.o(i.updateThresholdDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = updateThresholdDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
</UL>

<P><STRONG><a name="[b4]"></a>updateToleranceDisplay</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, user_lcd.o(i.updateToleranceDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = updateToleranceDisplay &rArr; displayFloat &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayFloat
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAbs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
</UL>

<P><STRONG><a name="[bd]"></a>updateUnitDisplay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, user_lcd.o(i.updateUnitDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = updateUnitDisplay &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
</UL>

<P><STRONG><a name="[b2]"></a>updateVoiceDisplay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, user_lcd.o(i.updateVoiceDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = updateVoiceDisplay &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaySystemMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
</UL>

<P><STRONG><a name="[e2]"></a>userAbs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_lcd.o(i.userAbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = userAbs &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateToleranceDisplay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMemDataDisplay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTemperatureDisplay
</UL>

<P><STRONG><a name="[9e]"></a>userRound</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, user_menu.o(i.userRound))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = userRound &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcTemperature
</UL>

<P><STRONG><a name="[e4]"></a>userSpiInit</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, user_spi.o(i.userSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = userSpiInit &rArr; spiIoInit &rArr; GPIO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
</UL>

<P><STRONG><a name="[e6]"></a>user_EEPROM_24C256_BufferRead</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, user_i2c.o(i.user_EEPROM_24C256_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = user_EEPROM_24C256_BufferRead &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AckCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_AckPolling
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genStopByteManual
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkStts
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEepromData
</UL>

<P><STRONG><a name="[f4]"></a>user_EEPROM_24C256_PageWrite</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, user_i2c.o(i.user_EEPROM_24C256_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = user_EEPROM_24C256_PageWrite &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_AckPolling
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkStts
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEepromData
</UL>

<P><STRONG><a name="[ef]"></a>user_I2C_EEPROM_AckPolling</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, user_i2c.o(i.user_I2C_EEPROM_AckPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_PageWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_PageWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_BufferRead
</UL>

<P><STRONG><a name="[e7]"></a>user_I2C_EEPROM_BufferRead</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, user_i2c.o(i.user_I2C_EEPROM_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = user_I2C_EEPROM_BufferRead &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AckCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_AckPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSigmaCtrlRegister
</UL>

<P><STRONG><a name="[f7]"></a>user_I2C_EEPROM_BufferWrite</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, user_i2c.o(i.user_I2C_EEPROM_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSigmaCtrlRegister
</UL>

<P><STRONG><a name="[d4]"></a>user_I2C_EEPROM_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, user_i2c.o(i.user_I2C_EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genStopByteManual
</UL>

<P><STRONG><a name="[f8]"></a>user_I2C_EEPROM_PageWrite</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, user_i2c.o(i.user_I2C_EEPROM_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_AckPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferWrite
</UL>

<P><STRONG><a name="[c2]"></a>voiceFunc</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, user_tone.o(i.voiceFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = voiceFunc &rArr; updatePWMChlDuty &rArr; updatePWMChXValue &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[92]"></a>writeEepromData</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, user_i2c.o(i.writeEepromData))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = writeEepromData &rArr; user_EEPROM_24C256_PageWrite &rArr; checkStts &rArr; genStopByteManual &rArr; user_I2C_EEPROM_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_EEPROM_24C256_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreNewRecord
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData2Flash
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureUnitSettingFunc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingKeyPressedFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incKeyPressedFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decKeyPressedFunc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureRecordInit
</UL>

<P><STRONG><a name="[85]"></a>writeLcdCommand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, user_lcd.o(i.writeLcdCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeLcdCommand &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnLcdInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>

<P><STRONG><a name="[87]"></a>writeLcdData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, user_lcd.o(i.writeLcdData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeLcdData &rArr; WriteData &rArr; SPI_SendByte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledDisplayBigChinesePub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
</UL>

<P><STRONG><a name="[a3]"></a>writeSigmaCtrlRegister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, user_i2c.o(i.writeSigmaCtrlRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = writeSigmaCtrlRegister &rArr; user_I2C_EEPROM_BufferWrite &rArr; user_I2C_EEPROM_PageWrite &rArr; user_I2C_EEPROM_AckPolling &rArr; I2C_TargetAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_I2C_EEPROM_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAdChlAndStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmaAdTest
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSigmaAdConvertOver
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopConvert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSigmaAdConvert
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[62]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, user_exti.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
